paths:
  '/userCredentials/{id}/user':
    get:
      tags:
        - userCredential
      summary: Fetches belongsTo relation user.
      operationId: userCredential.prototype.__get__user
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: UserCredential id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /userCredentials:
    post:
      tags:
        - userCredential
      summary: Create a new instance of the model and persist it into the data source.
      operationId: userCredential.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    put:
      tags:
        - userCredential
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: userCredential.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    get:
      tags:
        - userCredential
      summary: Find all instances of the model matched by filter from the data source.
      operationId: userCredential.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/userCredential'
      deprecated: false
  '/userCredentials/{id}/exists':
    get:
      tags:
        - userCredential
      summary: Check whether a model instance exists in the data source.
      operationId: 'userCredential.exists__get_userCredentials_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/userCredentials/{id}':
    head:
      tags:
        - userCredential
      summary: Check whether a model instance exists in the data source.
      operationId: 'userCredential.exists__head_userCredentials_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - userCredential
      summary: Find a model instance by id from the data source.
      operationId: userCredential.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    delete:
      tags:
        - userCredential
      summary: Delete a model instance by id from the data source.
      operationId: userCredential.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - userCredential
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: userCredential.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/userCredential'
        - name: id
          in: path
          description: UserCredential id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  /userCredentials/findOne:
    get:
      tags:
        - userCredential
      summary: Find first instance of the model matched by filter from the data source.
      operationId: userCredential.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  /userCredentials/update:
    post:
      tags:
        - userCredential
      summary: Update instances of the model matched by where from the data source.
      operationId: userCredential.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /userCredentials/count:
    get:
      tags:
        - userCredential
      summary: Count instances of the model matched by where from the data source.
      operationId: userCredential.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /userCredentials/change-stream:
    post:
      tags:
        - userCredential
      summary: Create a change stream.
      operationId: userCredential.createChangeStream__post_userCredentials_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - userCredential
      summary: Create a change stream.
      operationId: userCredential.createChangeStream__get_userCredentials_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/userIdentities/{id}/user':
    get:
      tags:
        - userIdentity
      summary: Fetches belongsTo relation user.
      operationId: userIdentity.prototype.__get__user
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: UserIdentity id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /userIdentities:
    post:
      tags:
        - userIdentity
      summary: Create a new instance of the model and persist it into the data source.
      operationId: userIdentity.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    put:
      tags:
        - userIdentity
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: userIdentity.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    get:
      tags:
        - userIdentity
      summary: Find all instances of the model matched by filter from the data source.
      operationId: userIdentity.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/userIdentity'
      deprecated: false
  '/userIdentities/{id}/exists':
    get:
      tags:
        - userIdentity
      summary: Check whether a model instance exists in the data source.
      operationId: 'userIdentity.exists__get_userIdentities_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/userIdentities/{id}':
    head:
      tags:
        - userIdentity
      summary: Check whether a model instance exists in the data source.
      operationId: 'userIdentity.exists__head_userIdentities_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - userIdentity
      summary: Find a model instance by id from the data source.
      operationId: userIdentity.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    delete:
      tags:
        - userIdentity
      summary: Delete a model instance by id from the data source.
      operationId: userIdentity.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - userIdentity
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: userIdentity.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/userIdentity'
        - name: id
          in: path
          description: UserIdentity id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
  /userIdentities/findOne:
    get:
      tags:
        - userIdentity
      summary: Find first instance of the model matched by filter from the data source.
      operationId: userIdentity.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
  /userIdentities/update:
    post:
      tags:
        - userIdentity
      summary: Update instances of the model matched by where from the data source.
      operationId: userIdentity.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /userIdentities/count:
    get:
      tags:
        - userIdentity
      summary: Count instances of the model matched by where from the data source.
      operationId: userIdentity.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /userIdentities/change-stream:
    post:
      tags:
        - userIdentity
      summary: Create a change stream.
      operationId: userIdentity.createChangeStream__post_userIdentities_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - userIdentity
      summary: Create a change stream.
      operationId: userIdentity.createChangeStream__get_userIdentities_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/accessTokens/{id}/user':
    get:
      tags:
        - accessToken
      summary: Fetches belongsTo relation user.
      operationId: accessToken.prototype.__get__user
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: AccessToken id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /accessTokens:
    post:
      tags:
        - accessToken
      summary: Create a new instance of the model and persist it into the data source.
      operationId: accessToken.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/accessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
    put:
      tags:
        - accessToken
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: accessToken.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/accessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
    get:
      tags:
        - accessToken
      summary: Find all instances of the model matched by filter from the data source.
      operationId: accessToken.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/accessToken'
      deprecated: false
  '/accessTokens/{id}/exists':
    get:
      tags:
        - accessToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'accessToken.exists__get_accessTokens_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/accessTokens/{id}':
    head:
      tags:
        - accessToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'accessToken.exists__head_accessTokens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - accessToken
      summary: Find a model instance by id from the data source.
      operationId: accessToken.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
    delete:
      tags:
        - accessToken
      summary: Delete a model instance by id from the data source.
      operationId: accessToken.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - accessToken
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: accessToken.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/accessToken'
        - name: id
          in: path
          description: AccessToken id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
  /accessTokens/findOne:
    get:
      tags:
        - accessToken
      summary: Find first instance of the model matched by filter from the data source.
      operationId: accessToken.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
  /accessTokens/update:
    post:
      tags:
        - accessToken
      summary: Update instances of the model matched by where from the data source.
      operationId: accessToken.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/accessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /accessTokens/count:
    get:
      tags:
        - accessToken
      summary: Count instances of the model matched by where from the data source.
      operationId: accessToken.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /accessTokens/change-stream:
    post:
      tags:
        - accessToken
      summary: Create a change stream.
      operationId: accessToken.createChangeStream__post_accessTokens_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - accessToken
      summary: Create a change stream.
      operationId: accessToken.createChangeStream__get_accessTokens_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /ACLs:
    post:
      tags:
        - ACL
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ACL.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    put:
      tags:
        - ACL
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: ACL.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    get:
      tags:
        - ACL
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ACL.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ACL'
      deprecated: false
  '/ACLs/{id}/exists':
    get:
      tags:
        - ACL
      summary: Check whether a model instance exists in the data source.
      operationId: 'ACL.exists__get_ACLs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/ACLs/{id}':
    head:
      tags:
        - ACL
      summary: Check whether a model instance exists in the data source.
      operationId: 'ACL.exists__head_ACLs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - ACL
      summary: Find a model instance by id from the data source.
      operationId: ACL.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    delete:
      tags:
        - ACL
      summary: Delete a model instance by id from the data source.
      operationId: ACL.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - ACL
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: ACL.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/ACL'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  /ACLs/findOne:
    get:
      tags:
        - ACL
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ACL.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  /ACLs/update:
    post:
      tags:
        - ACL
      summary: Update instances of the model matched by where from the data source.
      operationId: ACL.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /ACLs/count:
    get:
      tags:
        - ACL
      summary: Count instances of the model matched by where from the data source.
      operationId: ACL.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /ACLs/change-stream:
    post:
      tags:
        - ACL
      summary: Create a change stream.
      operationId: ACL.createChangeStream__post_ACLs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - ACL
      summary: Create a change stream.
      operationId: ACL.createChangeStream__get_ACLs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/RoleMappings/{id}/role':
    get:
      tags:
        - RoleMapping
      summary: Fetches belongsTo relation role.
      operationId: RoleMapping.prototype.__get__role
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /RoleMappings:
    post:
      tags:
        - RoleMapping
      summary: Create a new instance of the model and persist it into the data source.
      operationId: RoleMapping.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    put:
      tags:
        - RoleMapping
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: RoleMapping.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    get:
      tags:
        - RoleMapping
      summary: Find all instances of the model matched by filter from the data source.
      operationId: RoleMapping.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/RoleMapping'
      deprecated: false
  '/RoleMappings/{id}/exists':
    get:
      tags:
        - RoleMapping
      summary: Check whether a model instance exists in the data source.
      operationId: 'RoleMapping.exists__get_RoleMappings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/RoleMappings/{id}':
    head:
      tags:
        - RoleMapping
      summary: Check whether a model instance exists in the data source.
      operationId: 'RoleMapping.exists__head_RoleMappings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - RoleMapping
      summary: Find a model instance by id from the data source.
      operationId: RoleMapping.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - RoleMapping
      summary: Delete a model instance by id from the data source.
      operationId: RoleMapping.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - RoleMapping
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: RoleMapping.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  /RoleMappings/findOne:
    get:
      tags:
        - RoleMapping
      summary: Find first instance of the model matched by filter from the data source.
      operationId: RoleMapping.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  /RoleMappings/update:
    post:
      tags:
        - RoleMapping
      summary: Update instances of the model matched by where from the data source.
      operationId: RoleMapping.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /RoleMappings/count:
    get:
      tags:
        - RoleMapping
      summary: Count instances of the model matched by where from the data source.
      operationId: RoleMapping.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /RoleMappings/change-stream:
    post:
      tags:
        - RoleMapping
      summary: Create a change stream.
      operationId: RoleMapping.createChangeStream__post_RoleMappings_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - RoleMapping
      summary: Create a change stream.
      operationId: RoleMapping.createChangeStream__get_RoleMappings_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Roles/{id}/principals/{fk}':
    get:
      tags:
        - Role
      summary: Find a related item by id for principals.
      operationId: Role.prototype.__findById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - Role
      summary: Delete a related item by id for principals.
      operationId: Role.prototype.__destroyById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Role
      summary: Update a related item by id for principals.
      operationId: Role.prototype.__updateById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  '/Roles/{id}/principals':
    get:
      tags:
        - Role
      summary: Queries principals of Role.
      operationId: Role.prototype.__get__principals
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/RoleMapping'
      deprecated: false
    post:
      tags:
        - Role
      summary: Creates a new instance in principals of this model.
      operationId: Role.prototype.__create__principals
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - Role
      summary: Deletes all principals of this model.
      operationId: Role.prototype.__delete__principals
      parameters:
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Roles/{id}/principals/count':
    get:
      tags:
        - Role
      summary: Counts principals of Role.
      operationId: Role.prototype.__count__principals
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Roles:
    post:
      tags:
        - Role
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Role.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    put:
      tags:
        - Role
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: Role.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    get:
      tags:
        - Role
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Role.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
      deprecated: false
  '/Roles/{id}/exists':
    get:
      tags:
        - Role
      summary: Check whether a model instance exists in the data source.
      operationId: 'Role.exists__get_Roles_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Roles/{id}':
    head:
      tags:
        - Role
      summary: Check whether a model instance exists in the data source.
      operationId: 'Role.exists__head_Roles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - Role
      summary: Find a model instance by id from the data source.
      operationId: Role.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - Role
      summary: Delete a model instance by id from the data source.
      operationId: Role.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Role
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: Role.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Role'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /Roles/findOne:
    get:
      tags:
        - Role
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Role.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /Roles/update:
    post:
      tags:
        - Role
      summary: Update instances of the model matched by where from the data source.
      operationId: Role.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Roles/count:
    get:
      tags:
        - Role
      summary: Count instances of the model matched by where from the data source.
      operationId: Role.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Roles/change-stream:
    post:
      tags:
        - Role
      summary: Create a change stream.
      operationId: Role.createChangeStream__post_Roles_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - Role
      summary: Create a change stream.
      operationId: Role.createChangeStream__get_Roles_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/MyUsers/{id}/accessTokens/{fk}':
    get:
      tags:
        - MyUser
      summary: Find a related item by id for accessTokens.
      operationId: MyUser.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Delete a related item by id for accessTokens.
      operationId: MyUser.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update a related item by id for accessTokens.
      operationId: MyUser.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/accessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
  '/MyUsers/{id}/identities':
    get:
      tags:
        - MyUser
      summary: Fetches hasOne relation identities.
      operationId: MyUser.prototype.__get__identities
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in identities of this model.
      operationId: MyUser.prototype.__create__identities
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/userIdentity'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update identities of this model.
      operationId: MyUser.prototype.__update__identities
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/userIdentity'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes identities of this model.
      operationId: MyUser.prototype.__destroy__identities
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/credentials/{fk}':
    get:
      tags:
        - MyUser
      summary: Find a related item by id for credentials.
      operationId: MyUser.prototype.__findById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Delete a related item by id for credentials.
      operationId: MyUser.prototype.__destroyById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update a related item by id for credentials.
      operationId: MyUser.prototype.__updateById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/userCredential'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  '/MyUsers/{id}/roles/{fk}':
    get:
      tags:
        - MyUser
      summary: Find a related item by id for roles.
      operationId: MyUser.prototype.__findById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Delete a related item by id for roles.
      operationId: MyUser.prototype.__destroyById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update a related item by id for roles.
      operationId: MyUser.prototype.__updateById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Role'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  '/MyUsers/{id}/roles/rel/{fk}':
    put:
      tags:
        - MyUser
      summary: Add a related item by id for roles.
      operationId: MyUser.prototype.__link__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Remove the roles relation to an item by id.
      operationId: MyUser.prototype.__unlink__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - MyUser
      summary: Check the existence of roles relation to an item by id.
      operationId: MyUser.prototype.__exists__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/MyUsers/{id}/accessTokens':
    get:
      tags:
        - MyUser
      summary: Queries accessTokens of MyUser.
      operationId: MyUser.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/accessToken'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in accessTokens of this model.
      operationId: MyUser.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/accessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes all accessTokens of this model.
      operationId: MyUser.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/accessTokens/count':
    get:
      tags:
        - MyUser
      summary: Counts accessTokens of MyUser.
      operationId: MyUser.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/MyUsers/{id}/credentials':
    get:
      tags:
        - MyUser
      summary: Queries credentials of MyUser.
      operationId: MyUser.prototype.__get__credentials
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/userCredential'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in credentials of this model.
      operationId: MyUser.prototype.__create__credentials
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/userCredential'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes all credentials of this model.
      operationId: MyUser.prototype.__delete__credentials
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/credentials/count':
    get:
      tags:
        - MyUser
      summary: Counts credentials of MyUser.
      operationId: MyUser.prototype.__count__credentials
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/MyUsers/{id}/roles':
    get:
      tags:
        - MyUser
      summary: Queries roles of MyUser.
      operationId: MyUser.prototype.__get__roles
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in roles of this model.
      operationId: MyUser.prototype.__create__roles
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Role'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes all roles of this model.
      operationId: MyUser.prototype.__delete__roles
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/roles/count':
    get:
      tags:
        - MyUser
      summary: Counts roles of MyUser.
      operationId: MyUser.prototype.__count__roles
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /MyUsers:
    post:
      tags:
        - MyUser
      summary: Create a new instance of the model and persist it into the data source.
      operationId: MyUser.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: MyUser.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    get:
      tags:
        - MyUser
      summary: Find all instances of the model matched by filter from the data source.
      operationId: MyUser.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MyUser'
      deprecated: false
  '/MyUsers/{id}/exists':
    get:
      tags:
        - MyUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'MyUser.exists__get_MyUsers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/MyUsers/{id}':
    head:
      tags:
        - MyUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'MyUser.exists__head_MyUsers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - MyUser
      summary: Find a model instance by id from the data source.
      operationId: MyUser.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Delete a model instance by id from the data source.
      operationId: MyUser.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: MyUser.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/MyUser'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /MyUsers/findOne:
    get:
      tags:
        - MyUser
      summary: Find first instance of the model matched by filter from the data source.
      operationId: MyUser.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /MyUsers/update:
    post:
      tags:
        - MyUser
      summary: Update instances of the model matched by where from the data source.
      operationId: MyUser.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /MyUsers/count:
    get:
      tags:
        - MyUser
      summary: Count instances of the model matched by where from the data source.
      operationId: MyUser.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /MyUsers/change-stream:
    post:
      tags:
        - MyUser
      summary: Create a change stream.
      operationId: MyUser.createChangeStream__post_MyUsers_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - MyUser
      summary: Create a change stream.
      operationId: MyUser.createChangeStream__get_MyUsers_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /MyUsers/login:
    post:
      tags:
        - MyUser
      summary: Login a user with username/email and password.
      operationId: MyUser.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `{User}` - Data of the currently logged in user.

              (`include=user`)


            type: object
      deprecated: false
  /MyUsers/logout:
    post:
      tags:
        - MyUser
      summary: Logout a user with access token.
      operationId: MyUser.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/confirm:
    get:
      tags:
        - MyUser
      summary: Confirm a user registration with email verification token.
      operationId: MyUser.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/reset:
    post:
      tags:
        - MyUser
      summary: Reset password for a user with email.
      operationId: MyUser.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Places/{id}/owner':
    get:
      tags:
        - Place
      summary: Fetches belongsTo relation owner.
      operationId: Place.prototype.__get__owner
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  '/Places/{id}/groups/{fk}':
    get:
      tags:
        - Place
      summary: Find a related item by id for groups.
      operationId: Place.prototype.__findById__groups
      parameters:
        - name: fk
          in: path
          description: Foreign key for groups
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    delete:
      tags:
        - Place
      summary: Delete a related item by id for groups.
      operationId: Place.prototype.__destroyById__groups
      parameters:
        - name: fk
          in: path
          description: Foreign key for groups
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Place
      summary: Update a related item by id for groups.
      operationId: Place.prototype.__updateById__groups
      parameters:
        - name: fk
          in: path
          description: Foreign key for groups
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Group'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  '/Places/{id}/groups':
    get:
      tags:
        - Place
      summary: Queries groups of Place.
      operationId: Place.prototype.__get__groups
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
      deprecated: false
    post:
      tags:
        - Place
      summary: Creates a new instance in groups of this model.
      operationId: Place.prototype.__create__groups
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Group'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    delete:
      tags:
        - Place
      summary: Deletes all groups of this model.
      operationId: Place.prototype.__delete__groups
      parameters:
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Places/{id}/groups/count':
    get:
      tags:
        - Place
      summary: Counts groups of Place.
      operationId: Place.prototype.__count__groups
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Places:
    post:
      tags:
        - Place
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Place.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
    put:
      tags:
        - Place
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: Place.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
    get:
      tags:
        - Place
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Place.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Place'
      deprecated: false
  '/Places/{id}/exists':
    get:
      tags:
        - Place
      summary: Check whether a model instance exists in the data source.
      operationId: 'Place.exists__get_Places_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Places/{id}':
    head:
      tags:
        - Place
      summary: Check whether a model instance exists in the data source.
      operationId: 'Place.exists__head_Places_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - Place
      summary: Find a model instance by id from the data source.
      operationId: Place.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
    delete:
      tags:
        - Place
      summary: Delete a model instance by id from the data source.
      operationId: Place.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Place
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: Place.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Place'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  /Places/findOne:
    get:
      tags:
        - Place
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Place.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  /Places/update:
    post:
      tags:
        - Place
      summary: Update instances of the model matched by where from the data source.
      operationId: Place.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Places/count:
    get:
      tags:
        - Place
      summary: Count instances of the model matched by where from the data source.
      operationId: Place.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Places/change-stream:
    post:
      tags:
        - Place
      summary: Create a change stream.
      operationId: Place.createChangeStream__post_Places_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - Place
      summary: Create a change stream.
      operationId: Place.createChangeStream__get_Places_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /PlaceAreas:
    post:
      tags:
        - PlaceArea
      summary: Create a new instance of the model and persist it into the data source.
      operationId: PlaceArea.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
    put:
      tags:
        - PlaceArea
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: PlaceArea.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
    get:
      tags:
        - PlaceArea
      summary: Find all instances of the model matched by filter from the data source.
      operationId: PlaceArea.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/PlaceArea'
      deprecated: false
  '/PlaceAreas/{id}/exists':
    get:
      tags:
        - PlaceArea
      summary: Check whether a model instance exists in the data source.
      operationId: 'PlaceArea.exists__get_PlaceAreas_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/PlaceAreas/{id}':
    head:
      tags:
        - PlaceArea
      summary: Check whether a model instance exists in the data source.
      operationId: 'PlaceArea.exists__head_PlaceAreas_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - PlaceArea
      summary: Find a model instance by id from the data source.
      operationId: PlaceArea.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
    delete:
      tags:
        - PlaceArea
      summary: Delete a model instance by id from the data source.
      operationId: PlaceArea.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - PlaceArea
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: PlaceArea.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/PlaceArea'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
  /PlaceAreas/findOne:
    get:
      tags:
        - PlaceArea
      summary: Find first instance of the model matched by filter from the data source.
      operationId: PlaceArea.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
  /PlaceAreas/update:
    post:
      tags:
        - PlaceArea
      summary: Update instances of the model matched by where from the data source.
      operationId: PlaceArea.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /PlaceAreas/count:
    get:
      tags:
        - PlaceArea
      summary: Count instances of the model matched by where from the data source.
      operationId: PlaceArea.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /PlaceAreas/change-stream:
    post:
      tags:
        - PlaceArea
      summary: Create a change stream.
      operationId: PlaceArea.createChangeStream__post_PlaceAreas_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - PlaceArea
      summary: Create a change stream.
      operationId: PlaceArea.createChangeStream__get_PlaceAreas_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Boards:
    post:
      tags:
        - Board
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Board.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
    put:
      tags:
        - Board
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: Board.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
    get:
      tags:
        - Board
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Board.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Board'
      deprecated: false
  '/Boards/{id}/exists':
    get:
      tags:
        - Board
      summary: Check whether a model instance exists in the data source.
      operationId: 'Board.exists__get_Boards_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Boards/{id}':
    head:
      tags:
        - Board
      summary: Check whether a model instance exists in the data source.
      operationId: 'Board.exists__head_Boards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - Board
      summary: Find a model instance by id from the data source.
      operationId: Board.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
    delete:
      tags:
        - Board
      summary: Delete a model instance by id from the data source.
      operationId: Board.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Board
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: Board.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Board'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
  /Boards/findOne:
    get:
      tags:
        - Board
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Board.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
  /Boards/update:
    post:
      tags:
        - Board
      summary: Update instances of the model matched by where from the data source.
      operationId: Board.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Boards/count:
    get:
      tags:
        - Board
      summary: Count instances of the model matched by where from the data source.
      operationId: Board.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Boards/change-stream:
    post:
      tags:
        - Board
      summary: Create a change stream.
      operationId: Board.createChangeStream__post_Boards_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - Board
      summary: Create a change stream.
      operationId: Board.createChangeStream__get_Boards_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Devices:
    post:
      tags:
        - Device
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Device.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
    put:
      tags:
        - Device
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: Device.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
    get:
      tags:
        - Device
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Device.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Device'
      deprecated: false
  '/Devices/{id}/exists':
    get:
      tags:
        - Device
      summary: Check whether a model instance exists in the data source.
      operationId: 'Device.exists__get_Devices_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Devices/{id}':
    head:
      tags:
        - Device
      summary: Check whether a model instance exists in the data source.
      operationId: 'Device.exists__head_Devices_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - Device
      summary: Find a model instance by id from the data source.
      operationId: Device.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
    delete:
      tags:
        - Device
      summary: Delete a model instance by id from the data source.
      operationId: Device.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Device
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: Device.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Device'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
  /Devices/findOne:
    get:
      tags:
        - Device
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Device.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
  /Devices/update:
    post:
      tags:
        - Device
      summary: Update instances of the model matched by where from the data source.
      operationId: Device.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Devices/count:
    get:
      tags:
        - Device
      summary: Count instances of the model matched by where from the data source.
      operationId: Device.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Devices/change-stream:
    post:
      tags:
        - Device
      summary: Create a change stream.
      operationId: Device.createChangeStream__post_Devices_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - Device
      summary: Create a change stream.
      operationId: Device.createChangeStream__get_Devices_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Groups/{id}/owner':
    get:
      tags:
        - Group
      summary: Fetches belongsTo relation owner.
      operationId: Group.prototype.__get__owner
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  '/Groups/{id}/place':
    get:
      tags:
        - Group
      summary: Fetches belongsTo relation place.
      operationId: Group.prototype.__get__place
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  /Groups:
    post:
      tags:
        - Group
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Group.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    put:
      tags:
        - Group
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: Group.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    get:
      tags:
        - Group
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Group.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
      deprecated: false
  '/Groups/{id}/exists':
    get:
      tags:
        - Group
      summary: Check whether a model instance exists in the data source.
      operationId: 'Group.exists__get_Groups_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Groups/{id}':
    head:
      tags:
        - Group
      summary: Check whether a model instance exists in the data source.
      operationId: 'Group.exists__head_Groups_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - Group
      summary: Find a model instance by id from the data source.
      operationId: Group.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    delete:
      tags:
        - Group
      summary: Delete a model instance by id from the data source.
      operationId: Group.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Group
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: Group.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Group'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  /Groups/findOne:
    get:
      tags:
        - Group
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Group.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  /Groups/update:
    post:
      tags:
        - Group
      summary: Update instances of the model matched by where from the data source.
      operationId: Group.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Groups/count:
    get:
      tags:
        - Group
      summary: Count instances of the model matched by where from the data source.
      operationId: Group.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Groups/change-stream:
    post:
      tags:
        - Group
      summary: Create a change stream.
      operationId: Group.createChangeStream__post_Groups_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - Group
      summary: Create a change stream.
      operationId: Group.createChangeStream__get_Groups_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
definitions:
  x-any:
    properties: {}
  MyUser:
    properties:
      provider:
        type: string
      profile:
        type: object
      audit:
        type: object
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date
      lastUpdated:
        type: string
        format: date
      id:
        type: string
    required:
      - email
    additionalProperties: false
  userCredential:
    properties:
      provider:
        type: string
      authScheme:
        type: string
      externalId:
        type: string
      profile:
        type: object
      credentials:
        type: object
      created:
        type: string
        format: date
      modified:
        type: string
        format: date
      id:
        type: number
        format: double
      userId:
        type: string
    additionalProperties: false
  userIdentity:
    properties:
      provider:
        type: string
      authScheme:
        type: string
      externalId:
        type: string
      profile:
        type: object
      credentials:
        type: object
      created:
        type: string
        format: date
      modified:
        type: string
        format: date
      id:
        type: number
        format: double
      userId:
        type: string
    additionalProperties: false
  accessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      created:
        type: string
        format: date
      userId:
        type: string
    required:
      - id
    additionalProperties: false
  ACL:
    properties:
      model:
        description: The name of the model
        type: string
      property:
        description: 'The name of the property, method, scope, or relation'
        type: string
      accessType:
        type: string
      permission:
        type: string
      principalType:
        type: string
      principalId:
        type: string
      id:
        type: string
    additionalProperties: false
  Role:
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      created:
        type: string
        format: date
      modified:
        type: string
        format: date
    required:
      - name
    additionalProperties: false
  RoleMapping:
    description: Map principals to roles
    properties:
      id:
        type: string
      principalType:
        description: 'The principal type, such as user, application, or role'
        type: string
      principalId:
        type: string
      roleId:
        type: string
    additionalProperties: false
  Group:
    properties:
      audit:
        type: object
      description:
        description: Group Description
        type: string
      members:
        type: object
      ownerId:
        type: string
      placeId:
        type: string
      title:
        description: Group Title
        type: string
      id:
        type: string
    required:
      - ownerId
      - placeId
    additionalProperties: false
  Place:
    properties:
      ownerId:
        type: string
      description:
        type: string
      floor:
        type: string
      location:
        type: object
      title:
        type: string
      audit:
        type: object
      id:
        type: string
    required:
      - title
    additionalProperties: false
  PlaceArea:
    properties:
      audit:
        type: object
      description:
        type: string
      floor:
        type: string
      placeId:
        type: string
      title:
        type: string
      type:
        type: string
      id:
        type: string
    required:
      - floor
      - placeId
      - title
    additionalProperties: false
  Board:
    properties:
      audit:
        type: object
      description:
        type: string
      placeAreaId:
        type: string
      status:
        type: string
      title:
        type: string
      type:
        type: string
      uniqueIdentifier:
        type: string
      id:
        type: string
    required:
      - uniqueIdentifier
    additionalProperties: false
  Device:
    properties:
      audit:
        type: object
      description:
        type: string
      status:
        type: string
      title:
        type: string
      value:
        type: number
        format: double
      parentId:
        type: string
      id:
        type: string
    additionalProperties: false
swagger: '2.0'
info:
  x-ibm-name: granslive-web
  version: 1.0.0
  title: granslive-web
  contact:
    name: Gurvinder Singh
    email: sinny777@gmail.com
    url: 'http://www.granslive.com'
schemes:
  - http
host: $(catalog.host)
basePath: /api
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: false
  cors:
    enabled: true
  gateway: datapower-gateway
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:3000'
    $(catalog.host):
      properties:
        $(catalog.host): 'localhost:3000'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
